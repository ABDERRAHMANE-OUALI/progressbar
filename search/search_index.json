{
    "docs": [
        {
            "location": "/",
            "text": "Progressbar\n\n\nProgressbar\n is a console-based progress bar for Java with minimal runtime overhead.\n\n\nInstallation\n\n\nDepending on your build tool, add the following setting.\n\n\nMaven\n  \n<dependency>\n\n      \n<groupId>\nme.tongfei\n</groupId>\n\n      \n<artifactId>\nprogressbar\n</artifactId>\n\n      \n<version>\n0.7.4\n</version>\n\n  \n</dependency>\n\n\nGradle\ncompile\n \n'me.tongfei:progressbar:0.7.4'\n\n\n\n\n\nGetting started\n\n\n \nimport\n \nme.tongfei.progressbar.*\n;\n\n\n\n\nAnd then refer to \nDeclarative usage\n or \nImperative usage\n, two flavors of using a progress bar.\n\n\nChangelog\n\n\nChangelog",
            "title": "Introduction"
        },
        {
            "location": "/#progressbar",
            "text": "Progressbar  is a console-based progress bar for Java with minimal runtime overhead.",
            "title": "Progressbar"
        },
        {
            "location": "/#installation",
            "text": "Depending on your build tool, add the following setting.  Maven    <dependency> \n       <groupId> me.tongfei </groupId> \n       <artifactId> progressbar </artifactId> \n       <version> 0.7.4 </version> \n   </dependency>  Gradle compile   'me.tongfei:progressbar:0.7.4'",
            "title": "Installation"
        },
        {
            "location": "/#getting-started",
            "text": "import   me.tongfei.progressbar.* ;   And then refer to  Declarative usage  or  Imperative usage , two flavors of using a progress bar.",
            "title": "Getting started"
        },
        {
            "location": "/#changelog",
            "text": "Changelog",
            "title": "Changelog"
        },
        {
            "location": "/declarative-usage/",
            "text": "Since Progressbar \n0.6.0\n, declarative usage is the preferred way of using a progress bar.\n\n\nBasically, you wrap an \nIterable\n, \nIterator\n, \nInputStream\n (can be seen as an \nIterator<Byte>\n), \n\nSpliterator\n or \nStream\n, so that when iterating over it, a progress bar automatically tracks its progress. The type of your collection does not change after wrapped with a progress bar.\n\n\nThis is done by using the static method \nProgressBar.wrap(...)\n. The syntax is\n\n\n \nProgressBar\n.\nwrap\n(\ncollection\n,\n \n<\ntask\n \nname\n>)\n\n\n\n\nOr, if you want to use the \nbuilder pattern\n to customize the progress bar, use \n\n\n \nProgressBarBuilder\n \npbb\n \n=\n \nnew\n \nProgressBarBuilder\n()\n\n\n// setting the builder\n\n\nProgressBar\n.\nwrap\n(\niterable\n,\n \npbb\n)\n\n\n\n\nExamples:\n\n\nExample: Traverses through a Java collection\n\n\nIf the size of the collection is known, the progress bar's max will be automatically set as the size of the collection; otherwise the progress bar will be indefinite.\n\n\n \nfor\n \n(\nT\n \nx\n \n:\n \nProgressBar\n.\nwrap\n(\ncollection\n,\n \n\"Traversing\"\n))\n \n{\n\n    \n...\n\n\n}\n\n\n\n\nExample: Loops over an integer range\n\n\nSince \n0.7.2\n, tracking the progress of sequential or parallel Java streams is supported. \n\n\n \nProgressBar\n.\nwrap\n(\nIntStream\n.\nrange\n(\nleft\n,\n \nright\n).\nparallel\n(),\n \n\"Task\"\n).\nforEach\n(\ni\n \n->\n \n{\n\n        \n...\n\n    \n});\n\n\n\n\nExample: Reads a large file lazily\n\n\nWhen wrapping around a \njava.io.InputStream\n, whether it is a \njava.io.FileInputStream\n will be detected. If successful, the file's full size in byte will be retrieved and set as the progress bar's max; otherwise, the progress bar will be indefinite.\n\n\n \nProgressBarBuilder\n \npbb\n \n=\n \nnew\n \nProgressBarBuilder\n()\n\n    \n.\nsetTaskName\n(\n\"Reading\"\n)\n\n    \n.\nsetUnit\n(\n\"MB\"\n,\n \n1048576\n);\n \n// setting the progress bar to use MB as the unit\n\n\n\ntry\n \n(\nReader\n \nreader\n \n=\n \nnew\n \nBufferedReader\n(\nnew\n \nInputStreamReader\n(\n\n        \nProgressBar\n.\nwrap\n(\nnew\n \nFileInputStream\n(\nf\n),\n \npbb\n)\n\n    \n)))\n \n\n{\n\n    \n...\n\n\n}",
            "title": "Declarative usage"
        },
        {
            "location": "/declarative-usage/#example-traverses-through-a-java-collection",
            "text": "If the size of the collection is known, the progress bar's max will be automatically set as the size of the collection; otherwise the progress bar will be indefinite.    for   ( T   x   :   ProgressBar . wrap ( collection ,   \"Traversing\" ))   { \n     ...  }",
            "title": "Example: Traverses through a Java collection"
        },
        {
            "location": "/declarative-usage/#example-loops-over-an-integer-range",
            "text": "Since  0.7.2 , tracking the progress of sequential or parallel Java streams is supported.     ProgressBar . wrap ( IntStream . range ( left ,   right ). parallel (),   \"Task\" ). forEach ( i   ->   { \n         ... \n     });",
            "title": "Example: Loops over an integer range"
        },
        {
            "location": "/declarative-usage/#example-reads-a-large-file-lazily",
            "text": "When wrapping around a  java.io.InputStream , whether it is a  java.io.FileInputStream  will be detected. If successful, the file's full size in byte will be retrieved and set as the progress bar's max; otherwise, the progress bar will be indefinite.    ProgressBarBuilder   pbb   =   new   ProgressBarBuilder () \n     . setTaskName ( \"Reading\" ) \n     . setUnit ( \"MB\" ,   1048576 );   // setting the progress bar to use MB as the unit  try   ( Reader   reader   =   new   BufferedReader ( new   InputStreamReader ( \n         ProgressBar . wrap ( new   FileInputStream ( f ),   pbb ) \n     )))   { \n     ...  }",
            "title": "Example: Reads a large file lazily"
        },
        {
            "location": "/imperative-usage/",
            "text": "Since Progressbar \n0.7.0\n, Java try-with-resource pattern is used to ensure safe termination of progress bar threads.\n\n\nTo use progress bars imperatively to support mutation to the progress bar in the progress (e.g. manually moving the cursor), use the following syntax:\n\n\n \ntry\n \n(\nProgressBar\n \npb\n \n=\n \nnew\n \nProgressBar\n(\n\"Test\"\n,\n \n100\n))\n \n{\n \n// name, initial max\n\n \n// Use ProgressBar(\"Test\", 100, ProgressBarStyle.ASCII) if you want ASCII output style\n\n  \nfor\n \n(\nT\n \nx\n \n:\n \ncollection\n)\n \n{\n\n    \n...\n\n    \npb\n.\nstep\n();\n \n// step by 1\n\n    \npb\n.\nstepBy\n(\nn\n);\n \n// step by n\n\n    \n...\n\n    \npb\n.\nstepTo\n(\nn\n);\n \n// step directly to n\n\n    \n...\n\n    \npb\n.\nmaxHint\n(\nn\n);\n\n    \n// reset the max of this progress bar as n. This may be useful when the program\n\n    \n// gets new information about the current progress.\n\n    \n// Can set n to be less than zero: this means that this progress bar would become\n\n    \n// indefinite: the max would be unknown.\n\n    \n...\n\n    \npb\n.\nsetExtraMessage\n(\n\"Reading...\"\n);\n \n// Set extra message to display at the end of the bar\n\n  \n}\n\n\n}\n \n// progress bar stops automatically after completion of try-with-resource block",
            "title": "Imperative usage"
        },
        {
            "location": "/styles/",
            "text": "Currently \nprogressbar\n supports three visual style sets:\n\n\n\n\n\n\nCOLORFUL_UNICODE_BLOCK\n (default): Rendered using Unicode box drawing symbols with ANSI colors. Good if your font is among Menlo, Fira Mono, Source Code Pro or SF Mono; and your terminal supports ANSI colors.\n\n\n\n\n\n\nUNICODE_BLOCK\n: Rendered using Unicode box drawing symbols. \n\n\n\n\n\n\nASCII\n: Rendered using pure ASCII symbols. This is preferred if your terminal's font is either Consolas or Andale Mono.\n\n\n\n\n\n\nTo set these, using a progress bar \nbuilder\n with the \nsetStyle\n method, passing in one of the enum values above.\n\n\n \nProgressBarBuilder\n \npbb\n \n=\n \nnew\n \nProgressBarBuilder\n()\n\n    \n.\nsetStyle\n(\nProgressBarStyle\n.<\nSTYLE\n>);",
            "title": "Visual styles"
        },
        {
            "location": "/builder/",
            "text": "Progress bar builders\n\n\nSince \n0.7.0\n, apart from standard constructors, you can also use the so-called builder pattern to customize a progress bar.\n\n\nAll \nsetXXX()\n (also \nshowSpeed\n) clauses below are optional. \n\n\n \nProgressBarBuilder\n \npbb\n \n=\n \nnew\n \nProgressBarBuilder\n()\n\n    \n.\nsetInitialMax\n(<\ninitial\n \nmax\n>)\n\n    \n.\nsetStyle\n(\nProgressBarStyle\n.<\nstyle\n>)\n\n    \n.\nsetTaskName\n(<\ntask\n \nname\n>)\n\n    \n.\nsetUnit\n(<\nunit\n \nname\n>,\n \n<\nunit\n \nsize\n>)\n\n    \n.\nsetUpdateIntervalMillis\n(<\nupdate\n \ninterval\n>)\n\n    \n.\nshowSpeed\n();\n\n  \n// or .showSpeed(new DecimalFormat(\"#.##\")) to customize speed display\n\n\n\nfor\n \n(\nT\n \nx\n \n:\n \nProgressBar\n.\nwrap\n(\ncollection\n,\n \npbb\n))\n \n{\n\n    \n...\n\n\n}",
            "title": "Builder pattern"
        },
        {
            "location": "/builder/#progress-bar-builders",
            "text": "Since  0.7.0 , apart from standard constructors, you can also use the so-called builder pattern to customize a progress bar.  All  setXXX()  (also  showSpeed ) clauses below are optional.     ProgressBarBuilder   pbb   =   new   ProgressBarBuilder () \n     . setInitialMax (< initial   max >) \n     . setStyle ( ProgressBarStyle .< style >) \n     . setTaskName (< task   name >) \n     . setUnit (< unit   name >,   < unit   size >) \n     . setUpdateIntervalMillis (< update   interval >) \n     . showSpeed (); \n   // or .showSpeed(new DecimalFormat(\"#.##\")) to customize speed display  for   ( T   x   :   ProgressBar . wrap ( collection ,   pbb ))   { \n     ...  }",
            "title": "Progress bar builders"
        },
        {
            "location": "/changelog/",
            "text": "Changelog\n\n\n\n\n\n\n0.7.4\n:\n\n\n\n\nFixes the bug of slow exit with fast jobs (#50, PR #51). Thanks @meawoppl @denisrosset !\n\n\nDependency version bump.\n\n\n\n\n\n\n\n\n0.7.3\n:\n\n\n\n\nAdded support for customizing the decimal format of speed display (PR #49). Thanks @wfxr !\n\n\n\n\n\n\n\n\n0.7.2\n:\n\n\n\n\nAdded support for wrapping around \nSpliterator\ns and \nStream\ns. Streams could be either sequential or parallel (#44). Thanks @michaelmior !\n\n\nAdded support for displaying speed with unit (PR #43). Thanks @dani909 !\n\n\n\n\n\n\n\n\n0.7.1\n:\n\n\n\n\nFixed the problem of not properly closing the JLine \nTerminal\n object (#40). Thanks @voseldop !\n\n\nSuppressed JLine warning if a dumb terminal is created (partially fixed #42). Thanks @BuZZ-DEE !\n\n\nDocumentation: \n\n\nMoved \nCHANGELOG.md\n to the home directory and created a symlink in the \ndocs/\n folder to it (PR #41). Thanks @koppor !\n\n\nFixed bug (demo code was wrong) in the declarative usage section (PR #39). Thanks @AbhinavVishak !\n\n\n\n\n\n\n\n\n\n\n\n\n0.7.0\n:\n\n\n\n\nUtilized the try-with-resource pattern for the Java imperative syntax, deprecating \nProgressBar#start\n and \nProgressBar#stop\n.\n\n\nIntroduced units for progress bar that enables showing the total amount of work in some unit (e.g. MB / GB) (#33).\n\n\nIntroduced the builder pattern for constructing progress bars (instead of lots of different constructors).\n\n\nAdded declarative usage that wraps around \nInputStream\n, which enables tracking the progress of reading a large file or stream (#34).\n\n\nProgress bars are now colorful by default using ANSI color codes.\n\n\nDocumentation:\n\n\nBrand new \nmkdocs\n Material-style documentation! \n\n\n\n\n\n\n\n\n\n\n\n\n0.6.0\n: \n\n\n\n\nAdded declarative usage that wraps around \nIterator\n and \nIterable\n.\n\n\nUpdated \njline\n dependency to JLine 3. \n\n\nFixed problem in IntelliJ console. Thanks @saidaspen, @albancolley, @felixdivo, @AbhinavVishak !\n\n\nFixed warning about encoding during Maven build. Thanks @khmarbaise !\n\n\nFixed Java version in Maven build. Thanks @ccamel !\n\n\n\n\n\n\n\n\n0.5.5\n: Fixed the problem of the progress bar being stuck if it finishes too fast. \n Fixed the problem of \nStringIndexOutOfBoundsException\n error when the console width is too small. \n Thanks @bwittwer, @rholdberh and @bubyakin !\n\n\n\n\n0.5.4\n: Added indefinite progress bar support.\n\n\n0.5.3\n: Type of max/current of a progress bar is changed from \nint\n to \nlong\n. Thanks @vitobellini ! \n\n\n0.5.2\n: Methods now returns \nthis\n. This simplifies the initialization: Now you can do \npb = new ProgressBar(...).start()\n. Extra messages\n that are too long are trimmed properly. Thanks @mattcg !\n\n\n0.5.1\n: Fixed the refresh problem when progress ended. Added style (Unicode block characters / pure ASCII) support.\n\n\n0.5.0\n: Separated the progress bar thread from the main thread for better performance. Fixed the character offset issue. Thanks @rualpe !\n\n\n0.4.3\n: Changed the symbols to box-drawing characters; more fine-grained display. Thanks @hrj !\n\n\n0.4.2\n: Default output stream is changed to \nSystem.err\n; can be customized in constructor. Thanks @AluisioASG !\n\n\n0.4.1\n: Added a \nstepTo\n method to \nProgressBar\ns. Thanks @svenmauer !\n\n\n0.4.0\n: Migrated from Scala to Java: less dependencies.",
            "title": "Changelog"
        },
        {
            "location": "/changelog/#changelog",
            "text": "0.7.4 :   Fixes the bug of slow exit with fast jobs (#50, PR #51). Thanks @meawoppl @denisrosset !  Dependency version bump.     0.7.3 :   Added support for customizing the decimal format of speed display (PR #49). Thanks @wfxr !     0.7.2 :   Added support for wrapping around  Spliterator s and  Stream s. Streams could be either sequential or parallel (#44). Thanks @michaelmior !  Added support for displaying speed with unit (PR #43). Thanks @dani909 !     0.7.1 :   Fixed the problem of not properly closing the JLine  Terminal  object (#40). Thanks @voseldop !  Suppressed JLine warning if a dumb terminal is created (partially fixed #42). Thanks @BuZZ-DEE !  Documentation:   Moved  CHANGELOG.md  to the home directory and created a symlink in the  docs/  folder to it (PR #41). Thanks @koppor !  Fixed bug (demo code was wrong) in the declarative usage section (PR #39). Thanks @AbhinavVishak !       0.7.0 :   Utilized the try-with-resource pattern for the Java imperative syntax, deprecating  ProgressBar#start  and  ProgressBar#stop .  Introduced units for progress bar that enables showing the total amount of work in some unit (e.g. MB / GB) (#33).  Introduced the builder pattern for constructing progress bars (instead of lots of different constructors).  Added declarative usage that wraps around  InputStream , which enables tracking the progress of reading a large file or stream (#34).  Progress bars are now colorful by default using ANSI color codes.  Documentation:  Brand new  mkdocs  Material-style documentation!        0.6.0 :    Added declarative usage that wraps around  Iterator  and  Iterable .  Updated  jline  dependency to JLine 3.   Fixed problem in IntelliJ console. Thanks @saidaspen, @albancolley, @felixdivo, @AbhinavVishak !  Fixed warning about encoding during Maven build. Thanks @khmarbaise !  Fixed Java version in Maven build. Thanks @ccamel !     0.5.5 : Fixed the problem of the progress bar being stuck if it finishes too fast. \n Fixed the problem of  StringIndexOutOfBoundsException  error when the console width is too small. \n Thanks @bwittwer, @rholdberh and @bubyakin !   0.5.4 : Added indefinite progress bar support.  0.5.3 : Type of max/current of a progress bar is changed from  int  to  long . Thanks @vitobellini !   0.5.2 : Methods now returns  this . This simplifies the initialization: Now you can do  pb = new ProgressBar(...).start() . Extra messages\n that are too long are trimmed properly. Thanks @mattcg !  0.5.1 : Fixed the refresh problem when progress ended. Added style (Unicode block characters / pure ASCII) support.  0.5.0 : Separated the progress bar thread from the main thread for better performance. Fixed the character offset issue. Thanks @rualpe !  0.4.3 : Changed the symbols to box-drawing characters; more fine-grained display. Thanks @hrj !  0.4.2 : Default output stream is changed to  System.err ; can be customized in constructor. Thanks @AluisioASG !  0.4.1 : Added a  stepTo  method to  ProgressBar s. Thanks @svenmauer !  0.4.0 : Migrated from Scala to Java: less dependencies.",
            "title": "Changelog"
        }
    ]
}