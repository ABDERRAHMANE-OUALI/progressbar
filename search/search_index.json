{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Progressbar Progressbar is a console-based progress bar for Java with minimal runtime overhead. Installation Depending on your build tool, add the following setting. Maven <dependency> <groupId> me.tongfei </groupId> <artifactId> progressbar </artifactId> <version> 0.9.1 </version> </dependency> Gradle compile 'me.tongfei:progressbar:0.9.1' Getting started import me.tongfei.progressbar.* ; And then refer to Declarative usage or Imperative usage , two flavors of using a progress bar. Changelog Changelog","title":"Introduction"},{"location":"#progressbar","text":"Progressbar is a console-based progress bar for Java with minimal runtime overhead.","title":"Progressbar"},{"location":"#installation","text":"Depending on your build tool, add the following setting. Maven <dependency> <groupId> me.tongfei </groupId> <artifactId> progressbar </artifactId> <version> 0.9.1 </version> </dependency> Gradle compile 'me.tongfei:progressbar:0.9.1'","title":"Installation"},{"location":"#getting-started","text":"import me.tongfei.progressbar.* ; And then refer to Declarative usage or Imperative usage , two flavors of using a progress bar.","title":"Getting started"},{"location":"#changelog","text":"Changelog","title":"Changelog"},{"location":"builder/","text":"Progress bar builders Since 0.7.0 , apart from standard constructors, you can also use the so-called builder pattern to customize a progress bar. All setXXX() (also showSpeed ) clauses below are optional. ProgressBarBuilder pbb = new ProgressBarBuilder () . setInitialMax ( < initial max > ) . setStyle ( ProgressBarStyle . < style > ) . setTaskName ( < taskName name > ) . setUnit ( < unit name > , < unit size > ) . setUpdateIntervalMillis ( < update interval > ) . setMaxRenderedLength ( < max rendered length in terminal > ) . showSpeed (); // or .showSpeed(new DecimalFormat(\"#.##\")) to customize speed display for ( T x : ProgressBar . wrap ( collection , pbb )) { ... }","title":"Builder pattern"},{"location":"builder/#progress-bar-builders","text":"Since 0.7.0 , apart from standard constructors, you can also use the so-called builder pattern to customize a progress bar. All setXXX() (also showSpeed ) clauses below are optional. ProgressBarBuilder pbb = new ProgressBarBuilder () . setInitialMax ( < initial max > ) . setStyle ( ProgressBarStyle . < style > ) . setTaskName ( < taskName name > ) . setUnit ( < unit name > , < unit size > ) . setUpdateIntervalMillis ( < update interval > ) . setMaxRenderedLength ( < max rendered length in terminal > ) . showSpeed (); // or .showSpeed(new DecimalFormat(\"#.##\")) to customize speed display for ( T x : ProgressBar . wrap ( collection , pbb )) { ... }","title":"Progress bar builders"},{"location":"changelog/","text":"Changelog 0.9.1 : Improvements: Correct rendering of East Asian full-width characters as defined in Unicode TR11 (#75). Thanks @ImSejin and @fangyuzhong2016 ! Only renders the progress bar when progress is made (#91). This improves the performance of progress bars. Thanks @elanzini ! Added setMaxRenderedLength method to builders (#71). Thanks @koppor ! Misc: Updates JUnit 4 to JUnit 5 (PR #93). Thanks @michaelsiepmann ! Dependency version bump. 0.9.0 : New functionalities: Supports the parallel display of multiple progress bars (PR #69), fixing #11. Thanks @vehovsky ! Supports pausing and resuming progress bars (PR #56, PR #63), fixing #17. Thanks @mesat ! Supports direct wrapping around arrays (#62). Supports customized max length for progress bars (#71). Thanks @koppor and @cloudnotify ! Bugfixes: Fixes the bug of dividing-by-zero when extra message is too long on indefinite progress bars (PR #85), fixing #84. Thanks @AndreiNekrasOn and @rharder ! Misc: Removed redundant jline-terminal-jansi dependency (#77). Thanks @zbateson ! Added references to Kotlin extensions (#72). Thanks @heinrichreimer ! Changed the permission level of some methods in DefaultProgressBarRenderer to \"protected\" to make it more extensible (#81). Thanks @ksvladimir ! Dependency version bump. 0.8.1 : Bugfixes: Fixed the bug of possible negative suffix length (PR #58). Thanks @kristofarkas ! Fixed the issue of stepping by -1 when wrapped input stream is depleted (#60, PR #61). Thanks @mordechaim ! Default value for initial max in progress bar builders should be -1, not 0 (#60, PR #61). Thanks @mordechaim ! Dependency version bump. 0.8.0 : Supports loggers (PR #54) by factoring out progress bar consumers and renderers. This allows progress bars to be used with logging libraries such as SLF4J, hence fixing #12 and #18. Thanks @alexpeelman ! Dependency version bump. 0.7.4 : Fixes the bug of slow exit with fast jobs (#50, PR #51). Thanks @meawoppl @denisrosset ! Dependency version bump. 0.7.3 : Added support for customizing the decimal format of speed display (PR #49). Thanks @wfxr ! 0.7.2 : Added support for wrapping around Spliterator s and Stream s. Streams could be either sequential or parallel (#44). Thanks @michaelmior ! Added support for displaying speed with unit (PR #43). Thanks @dani909 ! 0.7.1 : Fixed the problem of not properly closing the JLine Terminal object (#40). Thanks @voseldop ! Suppressed JLine warning if a dumb terminal is created (partially fixed #42). Thanks @BuZZ-DEE ! Documentation: Moved CHANGELOG.md to the home directory and created a symlink in the docs/ folder to it (PR #41). Thanks @koppor ! Fixed bug (demo code was wrong) in the declarative usage section (PR #39). Thanks @AbhinavVishak ! 0.7.0 : Utilized the try-with-resource pattern for the Java imperative syntax, deprecating ProgressBar#start and ProgressBar#stop . Introduced units for progress bar that enables showing the total amount of work in some unit (e.g. MB / GB) (#33). Introduced the builder pattern for constructing progress bars (instead of lots of different constructors). Added declarative usage that wraps around InputStream , which enables tracking the progress of reading a large file or stream (#34). Progress bars are now colorful by default using ANSI color codes. Documentation: Brand new mkdocs Material-style documentation! 0.6.0 : Added declarative usage that wraps around Iterator and Iterable . Updated jline dependency to JLine 3. Fixed problem in IntelliJ console. Thanks @saidaspen, @albancolley, @felixdivo, @AbhinavVishak ! Fixed warning about encoding during Maven build. Thanks @khmarbaise ! Fixed Java version in Maven build. Thanks @ccamel ! 0.5.5 : Fixed the problem of the progress bar being stuck if it finishes too fast. Fixed the problem of StringIndexOutOfBoundsException error when the console width is too small. Thanks @bwittwer, @rholdberh and @bubyakin ! 0.5.4 : Added indefinite progress bar support. 0.5.3 : Type of max/current of a progress bar is changed from int to long . Thanks @vitobellini ! 0.5.2 : Methods now returns this . This simplifies the initialization: Now you can do pb = new ProgressBar(...).start() . Extra messages that are too long are trimmed properly. Thanks @mattcg ! 0.5.1 : Fixed the refresh problem when progress ended. Added style (Unicode block characters / pure ASCII) support. 0.5.0 : Separated the progress bar thread from the main thread for better performance. Fixed the character offset issue. Thanks @rualpe ! 0.4.3 : Changed the symbols to box-drawing characters; more fine-grained display. Thanks @hrj ! 0.4.2 : Default output stream is changed to System.err ; can be customized in constructor. Thanks @AluisioASG ! 0.4.1 : Added a stepTo method to ProgressBar s. Thanks @svenmauer ! 0.4.0 : Migrated from Scala to Java: less dependencies.","title":"Changelog"},{"location":"changelog/#changelog","text":"0.9.1 : Improvements: Correct rendering of East Asian full-width characters as defined in Unicode TR11 (#75). Thanks @ImSejin and @fangyuzhong2016 ! Only renders the progress bar when progress is made (#91). This improves the performance of progress bars. Thanks @elanzini ! Added setMaxRenderedLength method to builders (#71). Thanks @koppor ! Misc: Updates JUnit 4 to JUnit 5 (PR #93). Thanks @michaelsiepmann ! Dependency version bump. 0.9.0 : New functionalities: Supports the parallel display of multiple progress bars (PR #69), fixing #11. Thanks @vehovsky ! Supports pausing and resuming progress bars (PR #56, PR #63), fixing #17. Thanks @mesat ! Supports direct wrapping around arrays (#62). Supports customized max length for progress bars (#71). Thanks @koppor and @cloudnotify ! Bugfixes: Fixes the bug of dividing-by-zero when extra message is too long on indefinite progress bars (PR #85), fixing #84. Thanks @AndreiNekrasOn and @rharder ! Misc: Removed redundant jline-terminal-jansi dependency (#77). Thanks @zbateson ! Added references to Kotlin extensions (#72). Thanks @heinrichreimer ! Changed the permission level of some methods in DefaultProgressBarRenderer to \"protected\" to make it more extensible (#81). Thanks @ksvladimir ! Dependency version bump. 0.8.1 : Bugfixes: Fixed the bug of possible negative suffix length (PR #58). Thanks @kristofarkas ! Fixed the issue of stepping by -1 when wrapped input stream is depleted (#60, PR #61). Thanks @mordechaim ! Default value for initial max in progress bar builders should be -1, not 0 (#60, PR #61). Thanks @mordechaim ! Dependency version bump. 0.8.0 : Supports loggers (PR #54) by factoring out progress bar consumers and renderers. This allows progress bars to be used with logging libraries such as SLF4J, hence fixing #12 and #18. Thanks @alexpeelman ! Dependency version bump. 0.7.4 : Fixes the bug of slow exit with fast jobs (#50, PR #51). Thanks @meawoppl @denisrosset ! Dependency version bump. 0.7.3 : Added support for customizing the decimal format of speed display (PR #49). Thanks @wfxr ! 0.7.2 : Added support for wrapping around Spliterator s and Stream s. Streams could be either sequential or parallel (#44). Thanks @michaelmior ! Added support for displaying speed with unit (PR #43). Thanks @dani909 ! 0.7.1 : Fixed the problem of not properly closing the JLine Terminal object (#40). Thanks @voseldop ! Suppressed JLine warning if a dumb terminal is created (partially fixed #42). Thanks @BuZZ-DEE ! Documentation: Moved CHANGELOG.md to the home directory and created a symlink in the docs/ folder to it (PR #41). Thanks @koppor ! Fixed bug (demo code was wrong) in the declarative usage section (PR #39). Thanks @AbhinavVishak ! 0.7.0 : Utilized the try-with-resource pattern for the Java imperative syntax, deprecating ProgressBar#start and ProgressBar#stop . Introduced units for progress bar that enables showing the total amount of work in some unit (e.g. MB / GB) (#33). Introduced the builder pattern for constructing progress bars (instead of lots of different constructors). Added declarative usage that wraps around InputStream , which enables tracking the progress of reading a large file or stream (#34). Progress bars are now colorful by default using ANSI color codes. Documentation: Brand new mkdocs Material-style documentation! 0.6.0 : Added declarative usage that wraps around Iterator and Iterable . Updated jline dependency to JLine 3. Fixed problem in IntelliJ console. Thanks @saidaspen, @albancolley, @felixdivo, @AbhinavVishak ! Fixed warning about encoding during Maven build. Thanks @khmarbaise ! Fixed Java version in Maven build. Thanks @ccamel ! 0.5.5 : Fixed the problem of the progress bar being stuck if it finishes too fast. Fixed the problem of StringIndexOutOfBoundsException error when the console width is too small. Thanks @bwittwer, @rholdberh and @bubyakin ! 0.5.4 : Added indefinite progress bar support. 0.5.3 : Type of max/current of a progress bar is changed from int to long . Thanks @vitobellini ! 0.5.2 : Methods now returns this . This simplifies the initialization: Now you can do pb = new ProgressBar(...).start() . Extra messages that are too long are trimmed properly. Thanks @mattcg ! 0.5.1 : Fixed the refresh problem when progress ended. Added style (Unicode block characters / pure ASCII) support. 0.5.0 : Separated the progress bar thread from the main thread for better performance. Fixed the character offset issue. Thanks @rualpe ! 0.4.3 : Changed the symbols to box-drawing characters; more fine-grained display. Thanks @hrj ! 0.4.2 : Default output stream is changed to System.err ; can be customized in constructor. Thanks @AluisioASG ! 0.4.1 : Added a stepTo method to ProgressBar s. Thanks @svenmauer ! 0.4.0 : Migrated from Scala to Java: less dependencies.","title":"Changelog"},{"location":"declarative-usage/","text":"Since Progressbar 0.6.0 , declarative usage is the preferred way of using a progress bar. Basically, you wrap an Iterable , Iterator , InputStream (can be seen as an Iterator<Byte> ), Spliterator or Stream , so that when iterating over it, a progress bar automatically tracks its progress. The type of your collection does not change after wrapped with a progress bar. This is done by using the static method ProgressBar.wrap(...) . The syntax is ProgressBar . wrap ( collection , < taskName name > ) Or, if you want to use the builder pattern to customize the progress bar, use ProgressBarBuilder pbb = new ProgressBarBuilder () // setting the builder ProgressBar . wrap ( iterable , pbb ) Examples: Example: Traverses through a Java collection If the size of the collection is known, the progress bar's max will be automatically set as the size of the collection; otherwise the progress bar will be indefinite. for ( T x : ProgressBar . wrap ( collection , \"Traversing\" )) { ... } Example: Loops over an integer range Since 0.7.2 , tracking the progress of sequential or parallel Java streams is supported. ProgressBar . wrap ( IntStream . range ( left , right ). parallel (), \"Task\" ). forEach ( i -> { ... }); Example: Reads a large file lazily When wrapping around a java.io.InputStream , whether it is a java.io.FileInputStream will be detected. If successful, the file's full size in byte will be retrieved and set as the progress bar's max; otherwise, the progress bar will be indefinite. ProgressBarBuilder pbb = new ProgressBarBuilder () . setTaskName ( \"Reading\" ) . setUnit ( \"MB\" , 1048576 ); // setting the progress bar to use MB as the unit try ( Reader reader = new BufferedReader ( new InputStreamReader ( ProgressBar . wrap ( new FileInputStream ( f ), pbb ) ))) { ... }","title":"Declarative usage"},{"location":"declarative-usage/#example-traverses-through-a-java-collection","text":"If the size of the collection is known, the progress bar's max will be automatically set as the size of the collection; otherwise the progress bar will be indefinite. for ( T x : ProgressBar . wrap ( collection , \"Traversing\" )) { ... }","title":"Example: Traverses through a Java collection"},{"location":"declarative-usage/#example-loops-over-an-integer-range","text":"Since 0.7.2 , tracking the progress of sequential or parallel Java streams is supported. ProgressBar . wrap ( IntStream . range ( left , right ). parallel (), \"Task\" ). forEach ( i -> { ... });","title":"Example: Loops over an integer range"},{"location":"declarative-usage/#example-reads-a-large-file-lazily","text":"When wrapping around a java.io.InputStream , whether it is a java.io.FileInputStream will be detected. If successful, the file's full size in byte will be retrieved and set as the progress bar's max; otherwise, the progress bar will be indefinite. ProgressBarBuilder pbb = new ProgressBarBuilder () . setTaskName ( \"Reading\" ) . setUnit ( \"MB\" , 1048576 ); // setting the progress bar to use MB as the unit try ( Reader reader = new BufferedReader ( new InputStreamReader ( ProgressBar . wrap ( new FileInputStream ( f ), pbb ) ))) { ... }","title":"Example: Reads a large file lazily"},{"location":"imperative-usage/","text":"Since Progressbar 0.7.0 , Java try-with-resource pattern is used to ensure safe termination of progress bar threads. To use progress bars imperatively to support mutation to the progress bar in the progress (e.g. manually moving the cursor), use the following syntax: try ( ProgressBar pb = new ProgressBar ( \"Test\" , 100 )) { // name, initial max // Use ProgressBar(\"Test\", 100, ProgressBarStyle.ASCII) if you want ASCII output style for ( T x : collection ) { ... pb . step (); // step by 1 pb . stepBy ( n ); // step by n ... pb . stepTo ( n ); // step directly to n ... pb . maxHint ( n ); // reset the max of this progress bar as n. This may be useful when the program // gets new information about the current progress. // Can set n to be less than zero: this means that this progress bar would become // indefinite: the max would be unknown. ... pb . setExtraMessage ( \"Reading...\" ); // Set extra message to display at the end of the bar } } // progress bar stops automatically after completion of try-with-resource block","title":"Imperative usage"},{"location":"kotlin/","text":"Kotlin extensions Kotlin DSL-like builders are available at reimersoftware/progressbar-ktx .","title":"Kotlin extensions"},{"location":"kotlin/#kotlin-extensions","text":"Kotlin DSL-like builders are available at reimersoftware/progressbar-ktx .","title":"Kotlin extensions"},{"location":"loggers/","text":"Integrating with loggers (e.g. slf4j ) requires changes to how the progress bar is handled. To do this, a specific DelegatingProgressBarConsumer is required, with logger::info (or other logger levels) passed in as a lambda expression: // create logger using slf4j final Logger logger = LoggerFactory . getLogger ( \"Test\" ); try ( ProgressBar pb = new ProgressBarBuilder () . setInitialMax ( 100 ) . setTaskName ( \"Test\" ) . setConsumer ( new DelegatingProgressBarConsumer ( logger :: info )) . build ()) { // your taskName here }","title":"Integrating with loggers"},{"location":"styles/","text":"Currently progressbar supports three visual style sets: COLORFUL_UNICODE_BLOCK (default): Rendered using Unicode box drawing symbols with ANSI colors. Good if your font is among Menlo, Fira Mono, Source Code Pro or SF Mono; and your terminal supports ANSI colors. UNICODE_BLOCK : Rendered using Unicode box drawing symbols. ASCII : Rendered using pure ASCII symbols. This is preferred if your terminal's font is either Consolas or Andale Mono. To set these, using a progress bar builder with the setStyle method, passing in one of the enum values above. ProgressBarBuilder pbb = new ProgressBarBuilder () . setStyle ( ProgressBarStyle . < STYLE > );","title":"Visual styles"}]}